<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_c_l_s_m_image" kind="class" language="C++" prot="public">
    <compoundname>CLSMImage</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_l_s_m_image_1a67844045cb503950827a92392fc9ae8a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_c_l_s_m_frame" kindref="compound">CLSMFrame</ref> * &gt;</type>
        <definition>std::vector&lt;CLSMFrame*&gt; CLSMImage::frames</definition>
        <argsstring></argsstring>
        <name>frames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="163" column="17" bodyfile="include/image.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_c_l_s_m_image_1ab94be14f27a9a83ff2d8b5c03df378c2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; CLSMImage::marker_frame</definition>
        <argsstring></argsstring>
        <name>marker_frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="186" column="17" bodyfile="include/image.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_l_s_m_image_1a574a688bc019eec1639214151b206088" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CLSMImage::marker_line_start</definition>
        <argsstring></argsstring>
        <name>marker_line_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="187" column="18" bodyfile="include/image.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_l_s_m_image_1a9b1266611a9b0515fca914bc1419862d" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CLSMImage::marker_line_stop</definition>
        <argsstring></argsstring>
        <name>marker_line_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="188" column="18" bodyfile="include/image.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_l_s_m_image_1accde3e92fd7edb05d4b854f67c9fc63e" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CLSMImage::marker_event</definition>
        <argsstring></argsstring>
        <name>marker_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="189" column="18" bodyfile="include/image.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_l_s_m_image_1a979e019613060e092989aa523df9e02c" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CLSMImage::n_frames</definition>
        <argsstring></argsstring>
        <name>n_frames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="191" column="18" bodyfile="include/image.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_l_s_m_image_1a0ed178353e0af44330528f16ef03ffab" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CLSMImage::n_lines</definition>
        <argsstring></argsstring>
        <name>n_lines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="192" column="18" bodyfile="include/image.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_l_s_m_image_1ade64fa3f76bb41fdd0b83cf7026c4cc4" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CLSMImage::n_pixel</definition>
        <argsstring></argsstring>
        <name>n_pixel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="193" column="18" bodyfile="include/image.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_c_l_s_m_image_1af159b62265cad780e4a93b595abd2bd2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::remove_incomplete_frames</definition>
        <argsstring>()</argsstring>
        <name>remove_incomplete_frames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a8c1cbcd8cb51b9219b91ccf393969244" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::define_pixels_in_lines</definition>
        <argsstring>()</argsstring>
        <name>define_pixels_in_lines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="165" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_c_l_s_m_image_1a71c594888ce3588540f100a4f953d32e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::initialize_default</definition>
        <argsstring>(TTTR *tttr_data)</argsstring>
        <name>initialize_default</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the frames, lines, and pixels of a <ref refid="class_c_l_s_m_image" kindref="compound">CLSMImage</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="171" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a77e27d6498b540737950a2fd32695be7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::initialize_leica_sp5_ptu</definition>
        <argsstring>(TTTR *tttr_data)</argsstring>
        <name>initialize_leica_sp5_ptu</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Leica SP5 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tttr_data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="177" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a7fae0594644aef9e33ffe77e7b29dea4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::initialize_leica_sp8_ptu</definition>
        <argsstring>(TTTR *tttr_data)</argsstring>
        <name>initialize_leica_sp8_ptu</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Leica SP8 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tttr_data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="183" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_l_s_m_image_1a42ea11ffa9e08231d8b35fbf84ea5e98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_l_s_m_frame" kindref="compound">CLSMFrame</ref> *</type>
        <definition>CLSMFrame* CLSMImage::operator[]</definition>
        <argsstring>(unsigned int i_frame)</argsstring>
        <name>operator[]</name>
        <param>
          <type>unsigned int</type>
          <declname>i_frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="195" column="15" bodyfile="include/image.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a9c59983242f48299a837bd1051f24579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::fill_pixels</definition>
        <argsstring>(TTTR *tttr_data, std::vector&lt; unsigned int &gt; channels)</argsstring>
        <name>fill_pixels</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt;</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill the tttr_indices of the pixels with the indices of the channels that are within a pixel</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="205" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a687d91cb51ea90e2533620011373a2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::clear_pixels</definition>
        <argsstring>()</argsstring>
        <name>clear_pixels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear tttr_indices stored in the pixels</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="216" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1aea9302e2ac4fe2d323b58fd1607a1131" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_c_l_s_m_frame" kindref="compound">CLSMFrame</ref> * &gt;</type>
        <definition>std::vector&lt;CLSMFrame*&gt; CLSMImage::get_frames</definition>
        <argsstring>()</argsstring>
        <name>get_frames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="218" column="17" bodyfile="include/image.h" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a92b36d5e5b8284619abcc75f0c1556ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::get_intensity_image</definition>
        <argsstring>(unsigned int **out, int *dim1, int *dim2, int *dim3)</argsstring>
        <name>get_intensity_image</name>
        <param>
          <type>unsigned int **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="222" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1aa148bce4ca38c2e66f4ba11def3cb6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::get_decay_image</definition>
        <argsstring>(TTTR *tttr_data, unsigned char **out, int *dim1, int *dim2, int *dim3, int *dim4, int tac_coarsening, bool stack_frames)</argsstring>
        <name>get_decay_image</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <param>
          <type>unsigned char **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim3</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim4</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tac_coarsening</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stack_frames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes an image stack where the value of each pixel corresponds to a histogram of micro times in each pixel. The micro times can be coarsened by integer numbers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tttr_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to output array of unsigned chars that will contain the image stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim1</parametername>
</parameternamelist>
<parameterdescription>
<para>number of frames </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim2</parametername>
</parameternamelist>
<parameterdescription>
<para>number of lines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim3</parametername>
</parameternamelist>
<parameterdescription>
<para>number of pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim4</parametername>
</parameternamelist>
<parameterdescription>
<para>number of micro time channels in the histogram </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tac_coarsening</parametername>
</parameternamelist>
<parameterdescription>
<para>constant used to coarsen the micro times </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_frames</parametername>
</parameternamelist>
<parameterdescription>
<para>if True the frames are stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a026a4dee86eb25d064c5d04792d57166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::get_decays</definition>
        <argsstring>(TTTR *tttr_data, short *selection, int d_selection_1, int d_selection_2, int d_selection_3, unsigned int **out, int *dim1, int *dim2, int tac_coarsening, bool stack_frames)</argsstring>
        <name>get_decays</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_selection_1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_selection_2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d_selection_3</declname>
        </param>
        <param>
          <type>unsigned int **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tac_coarsening</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stack_frames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes micro time histograms for the stacks of images and a selection of pixels. Photons in pixels that are selected by the selection array contribute to the returned array of micro time histograms.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tttr_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selection</parametername>
</parameternamelist>
<parameterdescription>
<para>a stack of images used to select pixels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_selection_1</parametername>
</parameternamelist>
<parameterdescription>
<para>number of frames </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_selection_2</parametername>
</parameternamelist>
<parameterdescription>
<para>number of lines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_selection_3</parametername>
</parameternamelist>
<parameterdescription>
<para>number of pixels per line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to output array of unsigned int contains the micro time histograms </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim1</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the output array, i.e., the number of stacks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim1</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension the number of micro time channels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tac_coarsening</parametername>
</parameternamelist>
<parameterdescription>
<para>constant used to coarsen the micro times </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_frames</parametername>
</parameternamelist>
<parameterdescription>
<para>if True the frames are stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="263" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1aa333925d1173f44eae06f09c9964bbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::get_mean_tac_image</definition>
        <argsstring>(TTTR *tttr_data, double **out, int *dim1, int *dim2, int *dim3, int n_ph_min)</argsstring>
        <name>get_mean_tac_image</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_ph_min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates an image stack where the value of each pixel corresponds to the mean micro times per pixel discriminating micro time channels with few counts</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tttr_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to output array that will contain the image stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim1</parametername>
</parameternamelist>
<parameterdescription>
<para>returns the number of frames </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim2</parametername>
</parameternamelist>
<parameterdescription>
<para>returns the number of lines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim3</parametername>
</parameternamelist>
<parameterdescription>
<para>returns the number of pixels per line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_ph_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of photons in a micro time channel to be considered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="284" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1ae3808dc0b1194defe3dc09db29f4508f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CLSMImage::append</definition>
        <argsstring>(CLSMFrame *frame)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="class_c_l_s_m_frame" kindref="compound">CLSMFrame</ref> *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a frame to the CLSM image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="295" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a08d0f60d5acac745876111796186719f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CLSMImage::CLSMImage</definition>
        <argsstring>()</argsstring>
        <name>CLSMImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="298" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1ad021faf428cb640f93a18cb0ab2471b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CLSMImage::CLSMImage</definition>
        <argsstring>(const CLSMImage &amp;old_clsm, bool fill=false)</argsstring>
        <name>CLSMImage</name>
        <param>
          <type>const <ref refid="class_c_l_s_m_image" kindref="compound">CLSMImage</ref> &amp;</type>
          <declname>old_clsm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fill</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="300" column="5" bodyfile="include/image.h" bodystart="300" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1a643701c7585934479d0236b27a8c3bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CLSMImage::CLSMImage</definition>
        <argsstring>(TTTR *tttr_data, std::vector&lt; unsigned int &gt; marker_frame_start, unsigned int marker_line_start, unsigned int marker_line_stop, unsigned int marker_event_type, unsigned int n_pixel_per_line, std::string reading_routine)</argsstring>
        <name>CLSMImage</name>
        <param>
          <type><ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> *</type>
          <declname>tttr_data</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned int &gt;</type>
          <declname>marker_frame_start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>marker_line_start</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>marker_line_stop</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>marker_event_type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n_pixel_per_line</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>reading_routine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tttr_data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>marker_frame_start</parametername>
</parameternamelist>
<parameterdescription>
<para>routing channel numbers (default reading routine) or micro time channel number (SP8 reading routine) that serves as a marker informing on a new frame in the <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> data stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>marker_line_start</parametername>
</parameternamelist>
<parameterdescription>
<para>routing channel number (default reading routine) or micro time channel number (SP8 reading routine) that serves as a marker informing on the start of a new line in a frame within the <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> data stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>marker_line_stop</parametername>
</parameternamelist>
<parameterdescription>
<para>routing channel number (default reading routine) or micro time channel number (SP8 reading routine) that serves as a marker informing on the stop of a new line in a frame within the <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> data stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>marker_event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>event types that are interpreted as markers for frames and lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_pixel_per_line</parametername>
</parameternamelist>
<parameterdescription>
<para>number of pixels into which each line is separated. If the number of pixels per line is set to zero. The number of pixels per line will correspond to the number of lines in the first frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reading_routine</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer that specifies the reading routine used to read a CLSM image out of a <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> data stream. A CLSM image can be encoded by several ways in a <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> stream. Leica encodes frame and line markers in micro time channel numbers. PicoQuant and others use a more &apos;traditional&apos; encoding for frame and line markers marking <ref refid="class_t_t_t_r" kindref="compound">TTTR</ref> events as marker events and using the channel number to differentiate the different marker types. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="342" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_c_l_s_m_image_1acd13083d7e17fc03b55cf341cc97e6ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CLSMImage::~CLSMImage</definition>
        <argsstring>()</argsstring>
        <name>~CLSMImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/image.h" line="352" column="5" bodyfile="include/image.h" bodystart="352" bodyend="356"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/image.h" line="160" column="16" bodyfile="include/image.h" bodystart="160" bodyend="357"/>
    <listofallmembers>
      <member refid="class_c_l_s_m_image_1ae3808dc0b1194defe3dc09db29f4508f" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>append</name></member>
      <member refid="class_c_l_s_m_image_1a687d91cb51ea90e2533620011373a2a9" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>clear_pixels</name></member>
      <member refid="class_c_l_s_m_image_1a08d0f60d5acac745876111796186719f" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>CLSMImage</name></member>
      <member refid="class_c_l_s_m_image_1ad021faf428cb640f93a18cb0ab2471b2" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>CLSMImage</name></member>
      <member refid="class_c_l_s_m_image_1a643701c7585934479d0236b27a8c3bc6" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>CLSMImage</name></member>
      <member refid="class_c_l_s_m_image_1a8c1cbcd8cb51b9219b91ccf393969244" prot="private" virt="non-virtual"><scope>CLSMImage</scope><name>define_pixels_in_lines</name></member>
      <member refid="class_c_l_s_m_image_1a9c59983242f48299a837bd1051f24579" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>fill_pixels</name></member>
      <member refid="class_c_l_s_m_image_1a67844045cb503950827a92392fc9ae8a" prot="private" virt="non-virtual"><scope>CLSMImage</scope><name>frames</name></member>
      <member refid="class_c_l_s_m_image_1aa148bce4ca38c2e66f4ba11def3cb6d1" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>get_decay_image</name></member>
      <member refid="class_c_l_s_m_image_1a026a4dee86eb25d064c5d04792d57166" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>get_decays</name></member>
      <member refid="class_c_l_s_m_image_1aea9302e2ac4fe2d323b58fd1607a1131" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>get_frames</name></member>
      <member refid="class_c_l_s_m_image_1a92b36d5e5b8284619abcc75f0c1556ec" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>get_intensity_image</name></member>
      <member refid="class_c_l_s_m_image_1aa333925d1173f44eae06f09c9964bbdf" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>get_mean_tac_image</name></member>
      <member refid="class_c_l_s_m_image_1a71c594888ce3588540f100a4f953d32e" prot="protected" virt="non-virtual"><scope>CLSMImage</scope><name>initialize_default</name></member>
      <member refid="class_c_l_s_m_image_1a77e27d6498b540737950a2fd32695be7" prot="protected" virt="non-virtual"><scope>CLSMImage</scope><name>initialize_leica_sp5_ptu</name></member>
      <member refid="class_c_l_s_m_image_1a7fae0594644aef9e33ffe77e7b29dea4" prot="protected" virt="non-virtual"><scope>CLSMImage</scope><name>initialize_leica_sp8_ptu</name></member>
      <member refid="class_c_l_s_m_image_1accde3e92fd7edb05d4b854f67c9fc63e" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>marker_event</name></member>
      <member refid="class_c_l_s_m_image_1ab94be14f27a9a83ff2d8b5c03df378c2" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>marker_frame</name></member>
      <member refid="class_c_l_s_m_image_1a574a688bc019eec1639214151b206088" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>marker_line_start</name></member>
      <member refid="class_c_l_s_m_image_1a9b1266611a9b0515fca914bc1419862d" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>marker_line_stop</name></member>
      <member refid="class_c_l_s_m_image_1a979e019613060e092989aa523df9e02c" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>n_frames</name></member>
      <member refid="class_c_l_s_m_image_1a0ed178353e0af44330528f16ef03ffab" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>n_lines</name></member>
      <member refid="class_c_l_s_m_image_1ade64fa3f76bb41fdd0b83cf7026c4cc4" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>n_pixel</name></member>
      <member refid="class_c_l_s_m_image_1a42ea11ffa9e08231d8b35fbf84ea5e98" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>operator[]</name></member>
      <member refid="class_c_l_s_m_image_1af159b62265cad780e4a93b595abd2bd2" prot="private" virt="non-virtual"><scope>CLSMImage</scope><name>remove_incomplete_frames</name></member>
      <member refid="class_c_l_s_m_image_1acd13083d7e17fc03b55cf341cc97e6ff" prot="public" virt="non-virtual"><scope>CLSMImage</scope><name>~CLSMImage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
