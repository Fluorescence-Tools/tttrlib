language: generic
sudo: required

matrix:
  include:
    - os: linux
      dist: bionic
      addons:
        apt:
          packages:
            - doxygen
    - os: osx
      osx_image: xcode9.4
      addons:
        homebrew:
          packages:
            - doxygen
          update: true

env:
  # Build and test package on all supported python versions
  - BUILD_TARGET=3.7 MINICONDA_VERSION=latest

before_install:
  # export BRANCH environment variable to have unified names across different CI services
  - export BRANCH=$TRAVIS_BRANCH
  # Used to label the uploads
  - export CONDA_LABEL=$(if [ "TRAVIS_PULL_REQUEST_BRANCH" == "master" ]; then echo main; else echo nightly; fi)
  # Download and install miniconda
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then MINICONDA_OS=Linux; else MINICONDA_OS=MacOSX; fi
  - wget https://repo.continuum.io/miniconda/Miniconda3-$MINICONDA_VERSION-$MINICONDA_OS-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  # setup conda to always accept commands
  - conda config --set always_yes yes --set changeps1 no
  # unlink homebrew's boost to interfere with conda boost
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew unlink boost; fi
  # Install conda packages necessary in the host to build the recipe
  - source activate base
  - conda install python=$BUILD_TARGET conda-build git
  # Make sure that the thirdparty gits are pulled
  - git submodule update --init --force
  # Build the recipe and add the build path to the channels
  - conda build conda-recipe --output-folder bld-dir
  - conda config --add channels "file://`pwd`/bld-dir"

install:
  - conda install tttrlib -c "file://`pwd`/bld-dir"

script:
  # Install packages necessary to test the recipe
  - conda install nose coverage scipy
  # create a link from nosetests in test to make sure that the correct nosetests is used
  - ln -sf $(which nosetests) $(pwd)/test/
  - cd $(pwd)/test/
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]
    then
      git clone https://gitlab.peulen.xyz/tpeulen/tttr-data.git ..
      nosetests --nocapture --with-coverage test_*.py
      # Install codacy-coverage to upload the coverage results to codacy
      pip install codacy-coverage
      # Process and upload the coverage results
      coverage xml && python-codacy-coverage -r coverage.xml
    else
      nosetests --nocapture test_*.py
    fi
  - cd ..

after_success:
  - OS=$TRAVIS_OS_NAME-64
  - conda activate base
  # Install conda client to upload the package
  - conda install anaconda-client
  # Define labels for the conda package upload
  - if [[ "$BRANCH" == "master" ]]; then ANACONDA_LABEL=main; else ANACONDA_LABEL=nightly; fi
  # Upload the conda package
  - anaconda -t $ANACONDA_API_TOKEN upload -u $CONDA_USER -l $ANACONDA_LABEL bld-dir/$OS/*.tar.bz2 --force
  # Build the documentation
  - |
    if [ "TRAVIS_PULL_REQUEST_BRANCH" == "master" ];
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]
      export DEPLOY_DOCS="true"
      then
        cd docs
        conda env create -f environment.yml
        conda activate docs_env
        make clean; make html
        touch _build/html/.nojekyll
        cd ..
        conda deactivate
      fi
    fi


# Tell Travis CI to copy the documentation to the gh-pages branch of
# your GitHub repository.
deploy:
  provider: pages
  skip_cleanup: true
  github_token: $GITHUB_TOKEN  # Set in travis-ci.org dashboard, marked secure
  keep-history: true
  on:
    branch: development
    condition: $DEPLOY_DOCS = true
  local_dir: docs/_build/html/

notifications:
  email:
    recipients:
      - thomas.otavio.peulen@gmail.com
    on_success: change # default: change
    on_failure: change # default: always
