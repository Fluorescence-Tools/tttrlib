cmake_policy(SET CMP0078 NEW)
cmake_policy(SET CMP0086 NEW)


SET(MODULE_NAME ${PROJECT_NAME})

FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})
INCLUDE_DIRECTORIES(.)

IF(BUILD_PYTHON_INTERFACE)

    IF(BUILD_PYTHON_DOCS)
        # Doxygen: To create the python interface documentation
        FIND_PACKAGE(Doxygen REQUIRED)
        MESSAGE(STATUS "Building documentation for Python interface")
        MESSAGE(STATUS "Doxygen executable " ${DOXYGEN_EXECUTABLE})
        #This will be the main output of our command
        execute_process(COMMAND ${DOXYGEN_EXECUTABLE} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/doc OUTPUT_QUIET)
        execute_process(
                COMMAND python ${CMAKE_SOURCE_DIR}/tools/doxy2swig.py ${CMAKE_SOURCE_DIR}/doc/_build/xml/index.xml ${CMAKE_SOURCE_DIR}/ext/documentation.i
                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    ENDIF()

    MESSAGE(STATUS "Building Python interface") 
    cmake_policy(SET CMP0094 NEW)

    FIND_PACKAGE(Python COMPONENTS Interpreter Development.Module NumPy)
    INCLUDE_DIRECTORIES(BEFORE ${Python_NumPy_PATH} ${Python_INCLUDE_DIRS})
    LINK_LIBRARIES(${Python_LIBRARY} Python::NumPy)

    # Handle where to install the resulting Python package
    if(CALL_FROM_SETUP_PY)
        # The CMakeExtension will set CMAKE_INSTALL_PREFIX to the root
        # of the resulting wheel archive
        SET(MODULE_NAME ${PROJECT_NAME})
        set(MY_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
        SET_SOURCE_FILES_PROPERTIES(python/tttrlib.i PROPERTIES CPLUSPLUS ON SWIG_MODULE_NAME ${PROJECT_NAME})
    else()
        # The Python package is installed directly in the folder of the
        # detected interpreter (system, user, or virtualenv)
        set(MY_INSTALL_PREFIX ${Python_SITELIB})
        SET_SOURCE_FILES_PROPERTIES(python/tttrlib.i PROPERTIES CPLUSPLUS ON SWIG_MODULE_NAME ${PROJECT_NAME})
    endif()

    # Fix file path on Windows systems
    FILE(TO_CMAKE_PATH "${CMAKE_SWIG_OUTDIR}" CMAKE_SWIG_OUTDIR)
    MESSAGE(STATUS "CMAKE_SWIG_OUTDIR: '${CMAKE_SWIG_OUTDIR}'")
    MESSAGE(STATUS "SWIG_SUPPORT_FILES_DIRECTORY: '${SWIG_SUPPORT_FILES_DIRECTORY}'")
    MESSAGE(STATUS "MY_INSTALL_PREFIX: '${MY_INSTALL_PREFIX}'")
    SWIG_ADD_LIBRARY(
        ${MODULE_NAME}
        TYPE MODULE
        LANGUAGE python
        SOURCES python/tttrlib.i ${SRC_files}
    )
    TARGET_LINK_LIBRARIES(
            ${MODULE_NAME}
            ${PYTHON_LIBRARY}
            ${CMAKE_THREAD_LIBS_INIT}
    )
    IF (NOT PYTHON_LINK_LIBRARIES)
        IF (APPLE)
            SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES LINK_FLAGS "-Wl,-flat_namespace,-undefined,dynamic_lookup")
        ENDIF()
    ENDIF(NOT PYTHON_LINK_LIBRARIES)

    # =======
    # Install
    # =======
    # Get the autogenerated Python file
    get_property(WRAPPER_PY_FILE
        TARGET ${MODULE_NAME}
        PROPERTY SWIG_SUPPORT_FILES)
    
    # Install the autogenerated Python file
    INSTALL(FILES ${WRAPPER_PY_FILE}
        DESTINATION ${MY_INSTALL_PREFIX}
        COMPONENT bindings)
    
    # Install the SWIG library
    INSTALL(TARGETS ${MODULE_NAME}
        COMPONENT bindings
        LIBRARY DESTINATION ${MY_INSTALL_PREFIX}
        ARCHIVE DESTINATION ${MY_INSTALL_PREFIX}
        RUNTIME DESTINATION ${MY_INSTALL_PREFIX}
    )

ENDIF(BUILD_PYTHON_INTERFACE)

IF(BUILD_R_INTERFACE)
    MESSAGE(STATUS "Building R interface")
    MESSAGE("!!!WARNING THE R INTERFACE IS NOT IMPLEMENTED!!!")
    FIND_PACKAGE(R REQUIRED)
    INCLUDE_DIRECTORIES(${R_INCLUDE_DIR})
    INCLUDE(${SWIG_USE_FILE})
    SWIG_ADD_LIBRARY(
            ${MODULE_NAME}
            LANGUAGE r
            SOURCES python/tttrlib.i ${SRC_files}
    )
    TARGET_LINK_LIBRARIES(
            ${MODULE_NAME}
            ${HDF5_LIBRARIES}
            ${R_LIBRARIES}
            ${CMAKE_THREAD_LIBS_INIT}
            ${Boost_LIBRARIES}
            OpenMP::OpenMP_CXX
    )
ENDIF()



