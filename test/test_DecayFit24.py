from __future__ import division

import unittest
import numpy as np

import tttrlib
from misc.compute_irf import model_irf


irf, time_axis = model_irf(
    n_channels=64,
    period=32.,
    irf_position_p=2.0,
    irf_position_s=18.0,
    irf_width=0.25
)
bg = np.zeros_like(irf) + 0.2
np.random.seed(0)


class Tests(unittest.TestCase):

    def test_modelf24(self):
        tau1 = 4.0
        gamma = 0.01
        tau2 = 0.5
        a2 = 0.9
        offset = 1
        param = np.array([tau1, gamma, tau2, a2, offset])
        period, g, l1, l2, conv_stop = 32, 1.0, 0.1, 0.1, 63
        conv_stop = min(len(time_axis), conv_stop)
        corrections = np.array([period, g, l1, l2, conv_stop])
        dt = time_axis[1] - time_axis[0]
        out = np.zeros_like(bg)
        tttrlib.DecayFit24.modelf(param, irf, bg, dt, corrections, out)
        out_ref = np.array(
            [0.01571078, 0.01571031, 0.01570988, 0.01570959, 0.01572048,
             0.01609258, 0.02058282, 0.04054985, 0.07322865, 0.08840347,
             0.07745669, 0.05963912, 0.04647572, 0.03811999, 0.0328345,
             0.02942218, 0.02715495, 0.02559208, 0.02446654, 0.02361628,
             0.02294272, 0.02238568, 0.0219082, 0.02148738, 0.02110889,
             0.02076354, 0.02044534, 0.02015024, 0.01987537, 0.01961861,
             0.01937834, 0.01915323, 0.01894215, 0.01874414, 0.01855832,
             0.01838392, 0.0182202, 0.0180665, 0.01792219, 0.01778671,
             0.0176595, 0.01754006, 0.01742791, 0.01732261, 0.01722374,
             0.01713091, 0.01704375, 0.0169619, 0.01688505, 0.0168129,
             0.01674515, 0.01668153, 0.0166218, 0.01656572, 0.01651306,
             0.01646361, 0.01641718, 0.01637359, 0.01633266, 0.01629423,
             0.01625814, 0.01622426, 0.01619244, 0.01616257, 0.01571054,
             0.01571009, 0.01570967, 0.01571062, 0.01578379, 0.01724953,
             0.02796797, 0.05699103, 0.08457921, 0.08515608, 0.06828081,
             0.05234779, 0.04181477, 0.03518192, 0.03094818, 0.0281781,
             0.02630526, 0.02498664, 0.02401429, 0.02326186, 0.02265236,
             0.02213868, 0.02169176, 0.02129351, 0.0209325, 0.02060134,
             0.02029511, 0.02001042, 0.01974484, 0.01949651, 0.01926396,
             0.019046, 0.01884157, 0.01864976, 0.01846974, 0.01830077,
             0.01814213, 0.01799321, 0.01785338, 0.0177221, 0.01759884,
             0.0174831, 0.01737443, 0.0172724, 0.0171766, 0.01708664,
             0.01700218, 0.01692287, 0.01684841, 0.01677849, 0.01671284,
             0.0166512, 0.01659332, 0.01653897, 0.01648795, 0.01644003,
             0.01639505, 0.0163528, 0.01631314, 0.0162759, 0.01624093,
             0.0162081, 0.01617727, 0.01614833]
        )
        # import pylab as p
        # p.semilogy(out)
        # p.show()
        np.testing.assert_array_almost_equal(out, out_ref, decimal=4)

    def test_fit24(self):
        model = np.array(
            [0.01571078, 0.01571031, 0.01570988, 0.01570959, 0.01572048,
             0.01609258, 0.02058282, 0.04054985, 0.07322865, 0.08840347,
             0.07745669, 0.05963912, 0.04647572, 0.03811999, 0.0328345,
             0.02942218, 0.02715495, 0.02559208, 0.02446654, 0.02361628,
             0.02294272, 0.02238568, 0.0219082, 0.02148738, 0.02110889,
             0.02076354, 0.02044534, 0.02015024, 0.01987537, 0.01961861,
             0.01937834, 0.01915323, 0.01894215, 0.01874414, 0.01855832,
             0.01838392, 0.0182202, 0.0180665, 0.01792219, 0.01778671,
             0.0176595, 0.01754006, 0.01742791, 0.01732261, 0.01722374,
             0.01713091, 0.01704375, 0.0169619, 0.01688505, 0.0168129,
             0.01674515, 0.01668153, 0.0166218, 0.01656572, 0.01651306,
             0.01646361, 0.01641718, 0.01637359, 0.01633266, 0.01629423,
             0.01625814, 0.01622426, 0.01619244, 0.01616257, 0.01571054,
             0.01571009, 0.01570967, 0.01571062, 0.01578379, 0.01724953,
             0.02796797, 0.05699103, 0.08457921, 0.08515608, 0.06828081,
             0.05234779, 0.04181477, 0.03518192, 0.03094818, 0.0281781,
             0.02630526, 0.02498664, 0.02401429, 0.02326186, 0.02265236,
             0.02213868, 0.02169176, 0.02129351, 0.0209325, 0.02060134,
             0.02029511, 0.02001042, 0.01974484, 0.01949651, 0.01926396,
             0.019046, 0.01884157, 0.01864976, 0.01846974, 0.01830077,
             0.01814213, 0.01799321, 0.01785338, 0.0177221, 0.01759884,
             0.0174831, 0.01737443, 0.0172724, 0.0171766, 0.01708664,
             0.01700218, 0.01692287, 0.01684841, 0.01677849, 0.01671284,
             0.0166512, 0.01659332, 0.01653897, 0.01648795, 0.01644003,
             0.01639505, 0.0163528, 0.01631314, 0.0162759, 0.01624093,
             0.0162081, 0.01617727, 0.01614833]
        )
        n_photons = 5000000
        model *= n_photons / model.sum()
        data = np.random.poisson(model)
        period, g, l1, l2, conv_stop = 32, 1.0, 0.1, 0.1, 63
        irf, time_axis = model_irf(
            n_channels=64,
            period=period,
            irf_position_p=2.0,
            irf_position_s=18.0,
            irf_width=0.25
        )
        corrections = np.array([period, g, l1, l2, conv_stop])
        dt = time_axis[1] - time_axis[0]
        bg = np.zeros_like(irf) + 0.2

        tau1 = 3.8
        gamma = 0.02
        tau2 = 0.4
        a2 = 0.8
        offset = 1

        # create MParam structure that contains all parameters for fitting
        m_param = tttrlib.CreateMParam(
            irf=irf,
            background=bg,
            corrections=corrections,
            dt=dt,
            data=data
        )
        bifl_scatter = -1
        x = np.zeros(8, dtype=np.float64)
        x[:6] = [tau1, gamma, tau2, a2, offset, bifl_scatter]
        # tau1 free, gamma fixed, tau2 free, a2 free, offset free
        fixed = np.array([0, 0, 0, 0, 0], dtype=np.int16)
        twoIstar = tttrlib.DecayFit24.fit(x, fixed, m_param)
        tau1_target = 4.0
        gamma_target = 0.01
        tau2_target = 0.5
        a2_target = 0.9
        offset_target = 1

        self.assertAlmostEqual(x[0], tau1_target, delta=0.1)
        self.assertAlmostEqual(x[1], gamma_target, delta=0.1)
        self.assertAlmostEqual(x[2], tau2_target, delta=0.1)
        self.assertAlmostEqual(x[3], a2_target, delta=0.1)
        self.assertAlmostEqual(x[4], offset_target, delta=0.1)

    def test_fit24_2(self):
        np.random.seed(0)
        model = np.array(
            [0.01571078, 0.01571031, 0.01570988, 0.01570959, 0.01572048,
             0.01609258, 0.02058282, 0.04054985, 0.07322865, 0.08840347,
             0.07745669, 0.05963912, 0.04647572, 0.03811999, 0.0328345,
             0.02942218, 0.02715495, 0.02559208, 0.02446654, 0.02361628,
             0.02294272, 0.02238568, 0.0219082, 0.02148738, 0.02110889,
             0.02076354, 0.02044534, 0.02015024, 0.01987537, 0.01961861,
             0.01937834, 0.01915323, 0.01894215, 0.01874414, 0.01855832,
             0.01838392, 0.0182202, 0.0180665, 0.01792219, 0.01778671,
             0.0176595, 0.01754006, 0.01742791, 0.01732261, 0.01722374,
             0.01713091, 0.01704375, 0.0169619, 0.01688505, 0.0168129,
             0.01674515, 0.01668153, 0.0166218, 0.01656572, 0.01651306,
             0.01646361, 0.01641718, 0.01637359, 0.01633266, 0.01629423,
             0.01625814, 0.01622426, 0.01619244, 0.01616257, 0.01571054,
             0.01571009, 0.01570967, 0.01571062, 0.01578379, 0.01724953,
             0.02796797, 0.05699103, 0.08457921, 0.08515608, 0.06828081,
             0.05234779, 0.04181477, 0.03518192, 0.03094818, 0.0281781,
             0.02630526, 0.02498664, 0.02401429, 0.02326186, 0.02265236,
             0.02213868, 0.02169176, 0.02129351, 0.0209325, 0.02060134,
             0.02029511, 0.02001042, 0.01974484, 0.01949651, 0.01926396,
             0.019046, 0.01884157, 0.01864976, 0.01846974, 0.01830077,
             0.01814213, 0.01799321, 0.01785338, 0.0177221, 0.01759884,
             0.0174831, 0.01737443, 0.0172724, 0.0171766, 0.01708664,
             0.01700218, 0.01692287, 0.01684841, 0.01677849, 0.01671284,
             0.0166512, 0.01659332, 0.01653897, 0.01648795, 0.01644003,
             0.01639505, 0.0163528, 0.01631314, 0.0162759, 0.01624093,
             0.0162081, 0.01617727, 0.01614833]
        )
        n_photons = 5000000
        model *= n_photons / model.sum()
        data = np.random.poisson(model)
        period, g, l1, l2, conv_stop = 32, 1.0, 0.1, 0.1, 63
        irf, time_axis = model_irf(
            n_channels=64,
            period=period,
            irf_position_p=2.0,
            irf_position_s=18.0,
            irf_width=0.25
        )
        bg = np.zeros_like(irf) + 0.2
        settings = {
            'dt': time_axis[1] - time_axis[0],
            'g_factor': 1.0,
            'l1': 0.1,
            'l2': 0.2,
            'period': 32.0,
            'convolution_stop': 31,
            'irf': irf,
            'background': bg,
            'verbose': False
        }
        fit24 = tttrlib.Fit24(**settings)
        tau1, gamma, tau2, a2, background = 4.0, 0.51, 1.2, 0.4, 1.
        x0 = np.array([tau1, gamma, tau2, a2, background])
        fixed = np.array([0, 0, 0, 0, 0], dtype=np.int16)
        r = fit24(data=data, initial_values=x0, fixed=fixed)
        # for _ in range(1000): r = fit24(data=data, initial_values=x0, fixed=fixed)
        x = r['x']
        tau1_target = 4.0
        gamma_target = 0.01
        tau2_target = 0.5
        a2_target = 0.9
        offset_target = 1

        #data = fit24.data
        #model = fit24.model
        # import pylab as p
        # p.plot(data)
        # p.plot(model)
        # p.show()

        self.assertAlmostEqual(x[0], tau1_target, delta=0.1)
        self.assertAlmostEqual(x[1], gamma_target, delta=0.1)
        self.assertAlmostEqual(x[2], tau2_target, delta=0.1)
        self.assertAlmostEqual(x[3], a2_target, delta=0.1)
        self.assertAlmostEqual(x[4], offset_target, delta=0.1)
        self.assertEqual(True, r['twoIstar'] < 1.5)

